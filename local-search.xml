<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>mit6.081 lab10 mmap</title>
    <link href="/2023/03/30/lab10/"/>
    <url>/2023/03/30/lab10/</url>
    
    <content type="html"><![CDATA[<h1 id="时间及结果"><a href="#时间及结果" class="headerlink" title="时间及结果"></a>时间及结果</h1><p>总耗时: 6h27min<br><img src="https://raw.githubusercontent.com/dqxcj/Study/test/test2/test7/test820230329192843.png"></p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><h2 id="系统调用原型"><a href="#系统调用原型" class="headerlink" title="系统调用原型"></a>系统调用原型</h2><p>本次lab要求实现mmap和munmap系统调用，系统调用原型如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// xv6中没有定义size_t和off_t，故修改为uint64</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">mmap</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr, uint64 length, <span class="hljs-type">int</span> prot, <span class="hljs-type">int</span> flags,</span><br><span class="hljs-params">           <span class="hljs-type">int</span> fd, uint64 offset)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">munmap</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr, uint64 length)</span>;<br><span class="hljs-comment">// addr: 指定的虚拟地址，此lab中默认为0，即由内核决定映射的虚拟地址；</span><br><span class="hljs-comment">// length: 映射的字节数；</span><br><span class="hljs-comment">// prot: 可选 PROT_READ PROT_WRITE，用以表明映射部分的读写权限；</span><br><span class="hljs-comment">// flags: MAP_SHARED表示映射内存的修改要写回文件，MAP_PRIVATE则无需写回；</span><br><span class="hljs-comment">// fd: 要映射的文件；</span><br><span class="hljs-comment">// offset: 文件的偏移量</span><br><br><span class="hljs-comment">// mmap系统调用将文件fd从offset开始的length字节映射到虚拟地址addr处</span><br><span class="hljs-comment">// munmap系统调用取消虚拟地址addr开始的length字节的文件映射</span><br></code></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先需要定义VMA数据结构来保存一段文件映射的相关信息:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// kernel/proc.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXMMAP 16</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VMA</span>&#123;</span><br>  uint64 addr;<br>  uint64 length;<br>  <span class="hljs-type">int</span> prot;<br>  <span class="hljs-type">int</span> flags;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">f</span>;</span><br>  uint64 offset;<br>  <span class="hljs-type">int</span> used; <span class="hljs-comment">// 1 说明该VMA在使用中；0 说明空闲</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">spinlock</span> <span class="hljs-title">lock</span>;</span><br>&#125;;<br><span class="hljs-comment">// 在struct proc中新增VMA数组，支持MAXMMAP个元素</span><br><span class="hljs-comment">// struct VMA proc_VMA[MAXMMAP];</span><br></code></pre></td></tr></table></figure><p>该数据结构的初始化时机和释放时机与进程proc结构的其它项相同: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// kernel/proc.c: allocproc()</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MAXMMAP; i++) &#123;<br>  p-&gt;proc_VMA[i].addr = <span class="hljs-number">0</span>;<br>  p-&gt;proc_VMA[i].f = <span class="hljs-number">0</span>;<br>  p-&gt;proc_VMA[i].flags = <span class="hljs-number">0</span>;<br>  p-&gt;proc_VMA[i].length = <span class="hljs-number">0</span>;<br>  p-&gt;proc_VMA[i].offset = <span class="hljs-number">0</span>;<br>  p-&gt;proc_VMA[i].prot = <span class="hljs-number">0</span>;<br>  p-&gt;proc_VMA[i].used = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// kernel/proc.c: freeproc()</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MAXMMAP; i++) &#123;<br>  p-&gt;proc_VMA[i].addr = <span class="hljs-number">0</span>;<br>  p-&gt;proc_VMA[i].f = <span class="hljs-number">0</span>;<br>  p-&gt;proc_VMA[i].flags = <span class="hljs-number">0</span>;<br>  p-&gt;proc_VMA[i].length = <span class="hljs-number">0</span>;<br>  p-&gt;proc_VMA[i].offset = <span class="hljs-number">0</span>;<br>  p-&gt;proc_VMA[i].prot = <span class="hljs-number">0</span>;<br>  p-&gt;proc_VMA[i].used = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加系统调用的过程可以参照前面的lab，此处只记录系统调用的实现。</p><p>对于mmap系统调用，可以参考lazy allocation中的sbrk系统调用，仅增加myproc()-&gt;sz，不实际分配物理内存，而是在缺页故障的处理中分配物理页。</p><p>此处实现的mmap系统调用是直接从堆区获取虚拟内存来存放文件映射部分，而没有像linux那样单独划给文件映射区一片内存。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// kernel/sysfile.c</span><br>uint64 <span class="hljs-title function_">sys_mmap</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>  uint64 addr, length, offset;<br>  <span class="hljs-type">int</span> prot, flags, fd, i;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">p</span> =</span> myproc();<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">f</span>;</span><br>  <span class="hljs-comment">// 获取系统调用参数</span><br>  <span class="hljs-keyword">if</span>(argaddr(<span class="hljs-number">0</span>, &amp;addr) &lt; <span class="hljs-number">0</span> || argaddr(<span class="hljs-number">1</span>, &amp;length) &lt; <span class="hljs-number">0</span> || argaddr(<span class="hljs-number">5</span>, &amp;offset) &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span>(argint(<span class="hljs-number">2</span>, &amp;prot) &lt; <span class="hljs-number">0</span> || argint(<span class="hljs-number">3</span>, &amp;flags) &lt; <span class="hljs-number">0</span> || argint(<span class="hljs-number">4</span>, &amp;fd) &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span>(addr != <span class="hljs-number">0</span>) &#123;<br>    panic(<span class="hljs-string">&quot;sys_mmap: addr just can be 0 in my mmap&quot;</span>);<br>  &#125;<br><br>  acquire(&amp;p-&gt;lock);<br>  <span class="hljs-comment">// 如果flags指定映射区的修改要写回文件</span><br>  <span class="hljs-comment">// 那么该文件的读写权限和prot参数指定的读写权限必须相容</span><br>  <span class="hljs-keyword">if</span>(flags &amp; MAP_SHARED) &#123;<br>    <span class="hljs-keyword">if</span>(p-&gt;ofile[fd]-&gt;readable == <span class="hljs-number">0</span> &amp;&amp; (prot &amp; PROT_READ)) &#123;<br>      release(&amp;p-&gt;lock);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p-&gt;ofile[fd]-&gt;writable == <span class="hljs-number">0</span> &amp;&amp; (prot &amp; PROT_WRITE)) &#123;<br>      release(&amp;p-&gt;lock);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 仅增加p-&gt;sz，等缺页故障时再实际分配物理页</span><br>  addr = p-&gt;sz;<br>  p-&gt;sz += length;<br>  f = filedup(p-&gt;ofile[fd]);  <span class="hljs-comment">// 注意要增加文件的引用</span><br><br>  <span class="hljs-comment">// 找到一个空闲VMA用来存放文件映射的相关信息</span><br>  <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; MAXMMAP; i++) &#123;<br>    <span class="hljs-keyword">if</span>(p-&gt;proc_VMA[i].used == <span class="hljs-number">0</span>) &#123;<br>      p-&gt;proc_VMA[i].addr = addr;<br>      p-&gt;proc_VMA[i].f = f;<br>      p-&gt;proc_VMA[i].flags = flags;<br>      p-&gt;proc_VMA[i].length = length;<br>      p-&gt;proc_VMA[i].offset = offset;<br>      p-&gt;proc_VMA[i].prot = prot;<br>      p-&gt;proc_VMA[i].used = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span>(i == MAXMMAP) &#123;<br>    panic(<span class="hljs-string">&quot;no free VMA for mmap&quot;</span>);<br>  &#125;<br>  release(&amp;p-&gt;lock);<br>  <span class="hljs-keyword">return</span> addr;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来需要考虑在缺页故障中为文件映射实际分配物理内存，定义isMmap()函数用来判断一个地址是否是文件映射的页，定义handleMmap()函数为一个地址实际分配物理页并写入相关文件数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// kernel/trap.c</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @description: 判断传入的地址是否是文件映射的地址</span><br><span class="hljs-comment"> * @param &#123;uint64&#125; addr 虚拟地址</span><br><span class="hljs-comment"> * @return &#123;*&#125; 返回VMA编号，可以从myproc()-&gt;proc_VMA中获取相应VMA</span><br><span class="hljs-comment"> *             返回-1说明该地址不是文件映射的地址</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">isMmap</span><span class="hljs-params">(uint64 addr)</span> &#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">p</span> =</span> myproc();<br>  uint64 begin, end;<br>  <span class="hljs-comment">// 遍历当前进程的每个使用中的VMA，找到包含地址addr的那个</span><br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MAXMMAP; i++) &#123;<br>    <span class="hljs-keyword">if</span>(p-&gt;proc_VMA[i].used) &#123;<br>      begin = p-&gt;proc_VMA[i].addr;<br>      end = p-&gt;proc_VMA[i].addr + p-&gt;proc_VMA[i].length;<br>      <span class="hljs-keyword">if</span>(p-&gt;proc_VMA[i].used == <span class="hljs-number">1</span> &amp;&amp; (addr &gt;=  begin &amp;&amp; addr &lt; end)) &#123;<br>        <span class="hljs-keyword">return</span> i;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @description:  为文件映射的一页分配物理页</span><br><span class="hljs-comment"> * @param &#123;uint64&#125; addr 文件映射的一个虚拟地址</span><br><span class="hljs-comment"> * @param &#123;int&#125; index 这个文件映射对应的VMA编号，是isMmap的返回值</span><br><span class="hljs-comment"> * @return &#123;*&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">handleMmap</span><span class="hljs-params">(uint64 addr, <span class="hljs-type">int</span> index)</span> &#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">p</span> =</span> myproc();<br>  uint64 pa = (uint64)kalloc();<br>  <span class="hljs-type">int</span> perm = <span class="hljs-number">0</span>, prot, off;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span> *<span class="hljs-title">ip</span>;</span><br>  <span class="hljs-keyword">if</span>(pa == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 物理页不够</span><br>    panic(<span class="hljs-string">&quot;handleMmap: no pa&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">memset</span>((<span class="hljs-type">void</span>*)pa, <span class="hljs-number">0</span>, PGSIZE);<br><br>    <span class="hljs-comment">// 将文件数据读入物理页</span><br>    ip = p-&gt;proc_VMA[index].f-&gt;ip;<br>    off = p-&gt;proc_VMA[index].offset + (PGROUNDDOWN(addr) - p-&gt;proc_VMA[index].addr);<br>    ilock(ip);<br>    begin_op();<br>    readi(ip, <span class="hljs-number">0</span>, pa, off, PGSIZE);<br>    end_op();<br>    iunlock(ip);<br><br>    <span class="hljs-comment">// 设置PTE权限</span><br>    prot = p-&gt;proc_VMA[index].prot;<br>    <span class="hljs-keyword">if</span>(prot &amp; PROT_READ) &#123;<br>      perm |= PTE_R;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(prot &amp; PROT_WRITE) &#123;<br>      perm |= PTE_W;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(prot &amp; PROT_EXEC) &#123;<br>      perm |= PTE_X;<br>    &#125;<br>    perm |= PTE_U;<br><br>    <span class="hljs-comment">// 设置虚拟地址和物理地址的映射</span><br>    <span class="hljs-keyword">if</span>((mappages(p-&gt;pagetable, PGROUNDDOWN(addr), PGSIZE, pa, perm)) &lt; <span class="hljs-number">0</span>) &#123;<br>      panic(<span class="hljs-string">&quot;handleMmap: mappages f&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>像lazy allocation那样，在usertrap()中处理缺页故障；并且在uvmunmap()和uvmcopy()中跳过处理未定义或未分配的页表项，在walkaddr中为文件映射分配物理页</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// kernel/trap.c: usertrap()</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(scause == <span class="hljs-number">13</span> || scause == <span class="hljs-number">15</span>) &#123;<br>  <span class="hljs-type">int</span> index;<br>  <span class="hljs-comment">// 是mmap则分配物理页</span><br>  <span class="hljs-keyword">if</span>((index = isMmap(r_stval())) &gt;= <span class="hljs-number">0</span>) &#123; <br>    handleMmap(r_stval(), index);<br>  &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 不是mmap则说明访问了未使用的页，应该杀死进程</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;is no mmap\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;usertrap(): unexpected scause %p pid=%d\n&quot;</span>, r_scause(), p-&gt;pid);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;            sepc=%p stval=%p\n&quot;</span>, r_sepc(), r_stval());<br>    p-&gt;killed = <span class="hljs-number">1</span>;<br>  &#125;<br>&#125; <br><br><span class="hljs-comment">// kernel/vm.c: uvmunmap()</span><br><span class="hljs-keyword">if</span>((pte = walk(pagetable, a, <span class="hljs-number">0</span>)) == <span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">continue</span>;<br>  <span class="hljs-comment">// panic(&quot;uvmunmap: walk&quot;);</span><br><span class="hljs-keyword">if</span>((*pte &amp; PTE_V) == <span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">continue</span>;<br>  <span class="hljs-comment">// panic(&quot;uvmunmap: not mapped&quot;);</span><br><br><span class="hljs-comment">// kernel/vm.c: uvmcopy()</span><br><span class="hljs-keyword">if</span>((pte = walk(old, i, <span class="hljs-number">0</span>)) == <span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">continue</span>;<br>  <span class="hljs-comment">// panic(&quot;uvmcopy: pte should exist&quot;);</span><br><span class="hljs-keyword">if</span>((*pte &amp; PTE_V) == <span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">continue</span>;<br>  <span class="hljs-comment">// panic(&quot;uvmcopy: page not present&quot;);</span><br><br><span class="hljs-comment">// kernel/vm.c: walkaddr()</span><br><span class="hljs-keyword">if</span>(pte == <span class="hljs-number">0</span> || (*pte &amp; PTE_V) == <span class="hljs-number">0</span>) &#123;<br>  <span class="hljs-type">int</span> index;<br>  <span class="hljs-keyword">if</span>((index = isMmap(va)) &gt;= <span class="hljs-number">0</span>) &#123;<br>    handleMmap(va, index);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，mmap部分就完成了。</p><p>munmap系统调用取消一个文件映射的部分或全部，并将设置了MAP_SHARED的文件映射写回文件中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// kernel/sysfile.c</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @description: 将从addr开始的length取消文件映射</span><br><span class="hljs-comment"> * @param &#123;uint64&#125; addr 虚拟地址</span><br><span class="hljs-comment"> * @param &#123;uint64&#125; length 字节数</span><br><span class="hljs-comment"> * @return &#123;*&#125;</span><br><span class="hljs-comment"> */</span><br>uint64 <span class="hljs-title function_">munmap</span><span class="hljs-params">(uint64 addr, uint64 length)</span> &#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">p</span> =</span> myproc();<br>  <span class="hljs-type">int</span> i;<br>  uint64 begin = <span class="hljs-number">0</span>, end = <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">// 查找包含地址addr的文件映射所对应的VMA</span><br>  <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; MAXMMAP; i++) &#123;<br>    <span class="hljs-keyword">if</span>(p-&gt;proc_VMA[i].used) &#123;<br>      begin = p-&gt;proc_VMA[i].addr;<br>      end = p-&gt;proc_VMA[i].addr + p-&gt;proc_VMA[i].length;<br>      <span class="hljs-keyword">if</span>(addr &gt;= begin &amp;&amp; addr &lt; end) &#123;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (addr &lt; begin || addr &gt;= end) &#123;<br>    panic(<span class="hljs-string">&quot;sys_munmap: addr not mmap&quot;</span>);<br>  &#125;<br>  <span class="hljs-comment">// flags设置了MAP_SHARED的文件映射应该写回文件中</span><br>  <span class="hljs-keyword">if</span>(p-&gt;proc_VMA[i].flags &amp; MAP_SHARED) &#123;<br>    <span class="hljs-keyword">for</span>(uint64 index = PGROUNDDOWN(addr); index != PGROUNDUP(addr + length); index += PGSIZE) &#123;<br>      <span class="hljs-type">pte_t</span> *pte = walk(p-&gt;pagetable, index, <span class="hljs-number">0</span>);<br>      <span class="hljs-comment">// 未分配物理页的文件映射应该跳过</span><br>      <span class="hljs-keyword">if</span>(pte == <span class="hljs-number">0</span> || (*pte &amp; PTE_V) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      begin_op();<br>      <span class="hljs-keyword">if</span>(writei(p-&gt;proc_VMA[i].f-&gt;ip, <span class="hljs-number">1</span>, index, p-&gt;proc_VMA[i].offset + (index - addr), PGSIZE) &lt; <span class="hljs-number">0</span>) &#123;<br>        panic(<span class="hljs-string">&quot;sys_munmap: write&quot;</span>);<br>      &#125;<br>      end_op();<br>    &#125; <br>  &#125;<br>  <span class="hljs-comment">// 在页表上取消对应映射区域的PTE</span><br>  uvmunmap(p-&gt;pagetable, PGROUNDDOWN(addr), (PGROUNDUP(addr + length) - PGROUNDDOWN(addr)) / PGSIZE, <span class="hljs-number">1</span>);<br>  <span class="hljs-comment">// 进行munmap的地址从该文件映射的开头开始</span><br>  <span class="hljs-keyword">if</span>(addr == begin) &#123;<br>    <span class="hljs-keyword">if</span>(addr + length == end) &#123; <span class="hljs-comment">// 说明munmap的地址范围覆盖了该文件映射的全部，应该释放相应VMA，并减少文件引用</span><br>      p-&gt;proc_VMA[i].used = <span class="hljs-number">0</span>;<br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">f</span> =</span> p-&gt;proc_VMA[i].f;<br>      fileclose(f);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 说明munmap的地址范围只有该文件映射的前半部分</span><br>      p-&gt;proc_VMA[i].addr = addr + length;<br>      p-&gt;proc_VMA[i].length -= length;<br>      p-&gt;proc_VMA[i].offset += length;<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 进行munmap的地址从该文件映射的中间开始，一直到结尾(题目提示此时munmap的地址范围一定会在该文件映射的最后结束)</span><br>    p-&gt;proc_VMA[i].length -= length;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>uint64 <span class="hljs-title function_">sys_munmap</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>  uint64 addr;<br>  uint64 length;<br>  <span class="hljs-keyword">if</span>(argaddr(<span class="hljs-number">0</span>, &amp;addr) &lt; <span class="hljs-number">0</span> || argaddr(<span class="hljs-number">1</span>, &amp;length) &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> munmap(addr, length);<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，munmap系统调用也实现了。</p><p>还需要再处理一下exit()和fork()。</p><p>exit()函数中需要对该进程的全部文件映射进行munmap</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// kernel/proc.c: exit()</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MAXMMAP; i++) &#123;<br>  <span class="hljs-keyword">if</span>(p-&gt;proc_VMA[i].used) &#123;<br>    <span class="hljs-comment">// 偷懒直接调用了sys_munmap用的munmap函数</span><br>    munmap(p-&gt;proc_VMA[i].addr, p-&gt;proc_VMA[i].length);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>fork函数应该让子进程继承父进程的VMA和相应的文件映射，注意文件引用要加1。</p><p>文件映射的PTE会在uvmcopy()中继承。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MAXMMAP; i++) &#123;<br>  np-&gt;proc_VMA[i] = p-&gt;proc_VMA[i];<br>  <span class="hljs-keyword">if</span>(np-&gt;proc_VMA[i].f) filedup(np-&gt;proc_VMA[i].f);<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，即可通过mmaptest和usertests。</p>]]></content>
    
    
    
    <tags>
      
      <tag>mit6.s081</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mit6.081 lab10 mmap</title>
    <link href="/2023/03/30/mmap/"/>
    <url>/2023/03/30/mmap/</url>
    
    <content type="html"><![CDATA[<h1 id="时间及结果"><a href="#时间及结果" class="headerlink" title="时间及结果"></a>时间及结果</h1><p>总耗时: 6h27min<br><img src="https://raw.githubusercontent.com/dqxcj/Study/test/test2/test7/test820230329192843.png"></p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><h2 id="系统调用原型"><a href="#系统调用原型" class="headerlink" title="系统调用原型"></a>系统调用原型</h2><p>本次lab要求实现mmap和munmap系统调用，系统调用原型如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// xv6中没有定义size_t和off_t，故修改为uint64</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">mmap</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr, uint64 length, <span class="hljs-type">int</span> prot, <span class="hljs-type">int</span> flags,</span><br><span class="hljs-params">           <span class="hljs-type">int</span> fd, uint64 offset)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">munmap</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr, uint64 length)</span>;<br><span class="hljs-comment">// addr: 指定的虚拟地址，此lab中默认为0，即由内核决定映射的虚拟地址；</span><br><span class="hljs-comment">// length: 映射的字节数；</span><br><span class="hljs-comment">// prot: 可选 PROT_READ PROT_WRITE，用以表明映射部分的读写权限；</span><br><span class="hljs-comment">// flags: MAP_SHARED表示映射内存的修改要写回文件，MAP_PRIVATE则无需写回；</span><br><span class="hljs-comment">// fd: 要映射的文件；</span><br><span class="hljs-comment">// offset: 文件的偏移量</span><br><br><span class="hljs-comment">// mmap系统调用将文件fd从offset开始的length字节映射到虚拟地址addr处</span><br><span class="hljs-comment">// munmap系统调用取消虚拟地址addr开始的length字节的文件映射</span><br></code></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先需要定义VMA数据结构来保存一段文件映射的相关信息:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// kernel/proc.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXMMAP 16</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VMA</span>&#123;</span><br>  uint64 addr;<br>  uint64 length;<br>  <span class="hljs-type">int</span> prot;<br>  <span class="hljs-type">int</span> flags;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">f</span>;</span><br>  uint64 offset;<br>  <span class="hljs-type">int</span> used; <span class="hljs-comment">// 1 说明该VMA在使用中；0 说明空闲</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">spinlock</span> <span class="hljs-title">lock</span>;</span><br>&#125;;<br><span class="hljs-comment">// 在struct proc中新增VMA数组，支持MAXMMAP个元素</span><br><span class="hljs-comment">// struct VMA proc_VMA[MAXMMAP];</span><br></code></pre></td></tr></table></figure><p>该数据结构的初始化时机和释放时机与进程proc结构的其它项相同: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// kernel/proc.c: allocproc()</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MAXMMAP; i++) &#123;<br>  p-&gt;proc_VMA[i].addr = <span class="hljs-number">0</span>;<br>  p-&gt;proc_VMA[i].f = <span class="hljs-number">0</span>;<br>  p-&gt;proc_VMA[i].flags = <span class="hljs-number">0</span>;<br>  p-&gt;proc_VMA[i].length = <span class="hljs-number">0</span>;<br>  p-&gt;proc_VMA[i].offset = <span class="hljs-number">0</span>;<br>  p-&gt;proc_VMA[i].prot = <span class="hljs-number">0</span>;<br>  p-&gt;proc_VMA[i].used = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// kernel/proc.c: freeproc()</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MAXMMAP; i++) &#123;<br>  p-&gt;proc_VMA[i].addr = <span class="hljs-number">0</span>;<br>  p-&gt;proc_VMA[i].f = <span class="hljs-number">0</span>;<br>  p-&gt;proc_VMA[i].flags = <span class="hljs-number">0</span>;<br>  p-&gt;proc_VMA[i].length = <span class="hljs-number">0</span>;<br>  p-&gt;proc_VMA[i].offset = <span class="hljs-number">0</span>;<br>  p-&gt;proc_VMA[i].prot = <span class="hljs-number">0</span>;<br>  p-&gt;proc_VMA[i].used = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加系统调用的过程可以参照前面的lab，此处只记录系统调用的实现。</p><p>对于mmap系统调用，可以参考lazy allocation中的sbrk系统调用，仅增加myproc()-&gt;sz，不实际分配物理内存，而是在缺页故障的处理中分配物理页。</p><p>此处实现的mmap系统调用是直接从堆区获取虚拟内存来存放文件映射部分，而没有像linux那样单独划给文件映射区一片内存。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// kernel/sysfile.c</span><br>uint64 <span class="hljs-title function_">sys_mmap</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>  uint64 addr, length, offset;<br>  <span class="hljs-type">int</span> prot, flags, fd, i;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">p</span> =</span> myproc();<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">f</span>;</span><br>  <span class="hljs-comment">// 获取系统调用参数</span><br>  <span class="hljs-keyword">if</span>(argaddr(<span class="hljs-number">0</span>, &amp;addr) &lt; <span class="hljs-number">0</span> || argaddr(<span class="hljs-number">1</span>, &amp;length) &lt; <span class="hljs-number">0</span> || argaddr(<span class="hljs-number">5</span>, &amp;offset) &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span>(argint(<span class="hljs-number">2</span>, &amp;prot) &lt; <span class="hljs-number">0</span> || argint(<span class="hljs-number">3</span>, &amp;flags) &lt; <span class="hljs-number">0</span> || argint(<span class="hljs-number">4</span>, &amp;fd) &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span>(addr != <span class="hljs-number">0</span>) &#123;<br>    panic(<span class="hljs-string">&quot;sys_mmap: addr just can be 0 in my mmap&quot;</span>);<br>  &#125;<br><br>  acquire(&amp;p-&gt;lock);<br>  <span class="hljs-comment">// 如果flags指定映射区的修改要写回文件</span><br>  <span class="hljs-comment">// 那么该文件的读写权限和prot参数指定的读写权限必须相容</span><br>  <span class="hljs-keyword">if</span>(flags &amp; MAP_SHARED) &#123;<br>    <span class="hljs-keyword">if</span>(p-&gt;ofile[fd]-&gt;readable == <span class="hljs-number">0</span> &amp;&amp; (prot &amp; PROT_READ)) &#123;<br>      release(&amp;p-&gt;lock);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p-&gt;ofile[fd]-&gt;writable == <span class="hljs-number">0</span> &amp;&amp; (prot &amp; PROT_WRITE)) &#123;<br>      release(&amp;p-&gt;lock);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 仅增加p-&gt;sz，等缺页故障时再实际分配物理页</span><br>  addr = p-&gt;sz;<br>  p-&gt;sz += length;<br>  f = filedup(p-&gt;ofile[fd]);  <span class="hljs-comment">// 注意要增加文件的引用</span><br><br>  <span class="hljs-comment">// 找到一个空闲VMA用来存放文件映射的相关信息</span><br>  <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; MAXMMAP; i++) &#123;<br>    <span class="hljs-keyword">if</span>(p-&gt;proc_VMA[i].used == <span class="hljs-number">0</span>) &#123;<br>      p-&gt;proc_VMA[i].addr = addr;<br>      p-&gt;proc_VMA[i].f = f;<br>      p-&gt;proc_VMA[i].flags = flags;<br>      p-&gt;proc_VMA[i].length = length;<br>      p-&gt;proc_VMA[i].offset = offset;<br>      p-&gt;proc_VMA[i].prot = prot;<br>      p-&gt;proc_VMA[i].used = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span>(i == MAXMMAP) &#123;<br>    panic(<span class="hljs-string">&quot;no free VMA for mmap&quot;</span>);<br>  &#125;<br>  release(&amp;p-&gt;lock);<br>  <span class="hljs-keyword">return</span> addr;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来需要考虑在缺页故障中为文件映射实际分配物理内存，定义isMmap()函数用来判断一个地址是否是文件映射的页，定义handleMmap()函数为一个地址实际分配物理页并写入相关文件数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// kernel/trap.c</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @description: 判断传入的地址是否是文件映射的地址</span><br><span class="hljs-comment"> * @param &#123;uint64&#125; addr 虚拟地址</span><br><span class="hljs-comment"> * @return &#123;*&#125; 返回VMA编号，可以从myproc()-&gt;proc_VMA中获取相应VMA</span><br><span class="hljs-comment"> *             返回-1说明该地址不是文件映射的地址</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">isMmap</span><span class="hljs-params">(uint64 addr)</span> &#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">p</span> =</span> myproc();<br>  uint64 begin, end;<br>  <span class="hljs-comment">// 遍历当前进程的每个使用中的VMA，找到包含地址addr的那个</span><br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MAXMMAP; i++) &#123;<br>    <span class="hljs-keyword">if</span>(p-&gt;proc_VMA[i].used) &#123;<br>      begin = p-&gt;proc_VMA[i].addr;<br>      end = p-&gt;proc_VMA[i].addr + p-&gt;proc_VMA[i].length;<br>      <span class="hljs-keyword">if</span>(p-&gt;proc_VMA[i].used == <span class="hljs-number">1</span> &amp;&amp; (addr &gt;=  begin &amp;&amp; addr &lt; end)) &#123;<br>        <span class="hljs-keyword">return</span> i;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @description:  为文件映射的一页分配物理页</span><br><span class="hljs-comment"> * @param &#123;uint64&#125; addr 文件映射的一个虚拟地址</span><br><span class="hljs-comment"> * @param &#123;int&#125; index 这个文件映射对应的VMA编号，是isMmap的返回值</span><br><span class="hljs-comment"> * @return &#123;*&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">handleMmap</span><span class="hljs-params">(uint64 addr, <span class="hljs-type">int</span> index)</span> &#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">p</span> =</span> myproc();<br>  uint64 pa = (uint64)kalloc();<br>  <span class="hljs-type">int</span> perm = <span class="hljs-number">0</span>, prot, off;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span> *<span class="hljs-title">ip</span>;</span><br>  <span class="hljs-keyword">if</span>(pa == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 物理页不够</span><br>    panic(<span class="hljs-string">&quot;handleMmap: no pa&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">memset</span>((<span class="hljs-type">void</span>*)pa, <span class="hljs-number">0</span>, PGSIZE);<br><br>    <span class="hljs-comment">// 将文件数据读入物理页</span><br>    ip = p-&gt;proc_VMA[index].f-&gt;ip;<br>    off = p-&gt;proc_VMA[index].offset + (PGROUNDDOWN(addr) - p-&gt;proc_VMA[index].addr);<br>    ilock(ip);<br>    begin_op();<br>    readi(ip, <span class="hljs-number">0</span>, pa, off, PGSIZE);<br>    end_op();<br>    iunlock(ip);<br><br>    <span class="hljs-comment">// 设置PTE权限</span><br>    prot = p-&gt;proc_VMA[index].prot;<br>    <span class="hljs-keyword">if</span>(prot &amp; PROT_READ) &#123;<br>      perm |= PTE_R;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(prot &amp; PROT_WRITE) &#123;<br>      perm |= PTE_W;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(prot &amp; PROT_EXEC) &#123;<br>      perm |= PTE_X;<br>    &#125;<br>    perm |= PTE_U;<br><br>    <span class="hljs-comment">// 设置虚拟地址和物理地址的映射</span><br>    <span class="hljs-keyword">if</span>((mappages(p-&gt;pagetable, PGROUNDDOWN(addr), PGSIZE, pa, perm)) &lt; <span class="hljs-number">0</span>) &#123;<br>      panic(<span class="hljs-string">&quot;handleMmap: mappages f&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>像lazy allocation那样，在usertrap()中处理缺页故障；并且在uvmunmap()和uvmcopy()中跳过处理未定义或未分配的页表项，在walkaddr中为文件映射分配物理页</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// kernel/trap.c: usertrap()</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(scause == <span class="hljs-number">13</span> || scause == <span class="hljs-number">15</span>) &#123;<br>  <span class="hljs-type">int</span> index;<br>  <span class="hljs-comment">// 是mmap则分配物理页</span><br>  <span class="hljs-keyword">if</span>((index = isMmap(r_stval())) &gt;= <span class="hljs-number">0</span>) &#123; <br>    handleMmap(r_stval(), index);<br>  &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 不是mmap则说明访问了未使用的页，应该杀死进程</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;is no mmap\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;usertrap(): unexpected scause %p pid=%d\n&quot;</span>, r_scause(), p-&gt;pid);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;            sepc=%p stval=%p\n&quot;</span>, r_sepc(), r_stval());<br>    p-&gt;killed = <span class="hljs-number">1</span>;<br>  &#125;<br>&#125; <br><br><span class="hljs-comment">// kernel/vm.c: uvmunmap()</span><br><span class="hljs-keyword">if</span>((pte = walk(pagetable, a, <span class="hljs-number">0</span>)) == <span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">continue</span>;<br>  <span class="hljs-comment">// panic(&quot;uvmunmap: walk&quot;);</span><br><span class="hljs-keyword">if</span>((*pte &amp; PTE_V) == <span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">continue</span>;<br>  <span class="hljs-comment">// panic(&quot;uvmunmap: not mapped&quot;);</span><br><br><span class="hljs-comment">// kernel/vm.c: uvmcopy()</span><br><span class="hljs-keyword">if</span>((pte = walk(old, i, <span class="hljs-number">0</span>)) == <span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">continue</span>;<br>  <span class="hljs-comment">// panic(&quot;uvmcopy: pte should exist&quot;);</span><br><span class="hljs-keyword">if</span>((*pte &amp; PTE_V) == <span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">continue</span>;<br>  <span class="hljs-comment">// panic(&quot;uvmcopy: page not present&quot;);</span><br><br><span class="hljs-comment">// kernel/vm.c: walkaddr()</span><br><span class="hljs-keyword">if</span>(pte == <span class="hljs-number">0</span> || (*pte &amp; PTE_V) == <span class="hljs-number">0</span>) &#123;<br>  <span class="hljs-type">int</span> index;<br>  <span class="hljs-keyword">if</span>((index = isMmap(va)) &gt;= <span class="hljs-number">0</span>) &#123;<br>    handleMmap(va, index);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，mmap部分就完成了。</p><p>munmap系统调用取消一个文件映射的部分或全部，并将设置了MAP_SHARED的文件映射写回文件中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// kernel/sysfile.c</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @description: 将从addr开始的length取消文件映射</span><br><span class="hljs-comment"> * @param &#123;uint64&#125; addr 虚拟地址</span><br><span class="hljs-comment"> * @param &#123;uint64&#125; length 字节数</span><br><span class="hljs-comment"> * @return &#123;*&#125;</span><br><span class="hljs-comment"> */</span><br>uint64 <span class="hljs-title function_">munmap</span><span class="hljs-params">(uint64 addr, uint64 length)</span> &#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">p</span> =</span> myproc();<br>  <span class="hljs-type">int</span> i;<br>  uint64 begin = <span class="hljs-number">0</span>, end = <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">// 查找包含地址addr的文件映射所对应的VMA</span><br>  <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; MAXMMAP; i++) &#123;<br>    <span class="hljs-keyword">if</span>(p-&gt;proc_VMA[i].used) &#123;<br>      begin = p-&gt;proc_VMA[i].addr;<br>      end = p-&gt;proc_VMA[i].addr + p-&gt;proc_VMA[i].length;<br>      <span class="hljs-keyword">if</span>(addr &gt;= begin &amp;&amp; addr &lt; end) &#123;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (addr &lt; begin || addr &gt;= end) &#123;<br>    panic(<span class="hljs-string">&quot;sys_munmap: addr not mmap&quot;</span>);<br>  &#125;<br>  <span class="hljs-comment">// flags设置了MAP_SHARED的文件映射应该写回文件中</span><br>  <span class="hljs-keyword">if</span>(p-&gt;proc_VMA[i].flags &amp; MAP_SHARED) &#123;<br>    <span class="hljs-keyword">for</span>(uint64 index = PGROUNDDOWN(addr); index != PGROUNDUP(addr + length); index += PGSIZE) &#123;<br>      <span class="hljs-type">pte_t</span> *pte = walk(p-&gt;pagetable, index, <span class="hljs-number">0</span>);<br>      <span class="hljs-comment">// 未分配物理页的文件映射应该跳过</span><br>      <span class="hljs-keyword">if</span>(pte == <span class="hljs-number">0</span> || (*pte &amp; PTE_V) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      begin_op();<br>      <span class="hljs-keyword">if</span>(writei(p-&gt;proc_VMA[i].f-&gt;ip, <span class="hljs-number">1</span>, index, p-&gt;proc_VMA[i].offset + (index - addr), PGSIZE) &lt; <span class="hljs-number">0</span>) &#123;<br>        panic(<span class="hljs-string">&quot;sys_munmap: write&quot;</span>);<br>      &#125;<br>      end_op();<br>    &#125; <br>  &#125;<br>  <span class="hljs-comment">// 在页表上取消对应映射区域的PTE</span><br>  uvmunmap(p-&gt;pagetable, PGROUNDDOWN(addr), (PGROUNDUP(addr + length) - PGROUNDDOWN(addr)) / PGSIZE, <span class="hljs-number">1</span>);<br>  <span class="hljs-comment">// 进行munmap的地址从该文件映射的开头开始</span><br>  <span class="hljs-keyword">if</span>(addr == begin) &#123;<br>    <span class="hljs-keyword">if</span>(addr + length == end) &#123; <span class="hljs-comment">// 说明munmap的地址范围覆盖了该文件映射的全部，应该释放相应VMA，并减少文件引用</span><br>      p-&gt;proc_VMA[i].used = <span class="hljs-number">0</span>;<br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">f</span> =</span> p-&gt;proc_VMA[i].f;<br>      fileclose(f);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 说明munmap的地址范围只有该文件映射的前半部分</span><br>      p-&gt;proc_VMA[i].addr = addr + length;<br>      p-&gt;proc_VMA[i].length -= length;<br>      p-&gt;proc_VMA[i].offset += length;<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 进行munmap的地址从该文件映射的中间开始，一直到结尾(题目提示此时munmap的地址范围一定会在该文件映射的最后结束)</span><br>    p-&gt;proc_VMA[i].length -= length;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>uint64 <span class="hljs-title function_">sys_munmap</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>  uint64 addr;<br>  uint64 length;<br>  <span class="hljs-keyword">if</span>(argaddr(<span class="hljs-number">0</span>, &amp;addr) &lt; <span class="hljs-number">0</span> || argaddr(<span class="hljs-number">1</span>, &amp;length) &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> munmap(addr, length);<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，munmap系统调用也实现了。</p><p>还需要再处理一下exit()和fork()。</p><p>exit()函数中需要对该进程的全部文件映射进行munmap</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// kernel/proc.c: exit()</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MAXMMAP; i++) &#123;<br>  <span class="hljs-keyword">if</span>(p-&gt;proc_VMA[i].used) &#123;<br>    <span class="hljs-comment">// 偷懒直接调用了sys_munmap用的munmap函数</span><br>    munmap(p-&gt;proc_VMA[i].addr, p-&gt;proc_VMA[i].length);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>fork函数应该让子进程继承父进程的VMA和相应的文件映射，注意文件引用要加1。</p><p>文件映射的PTE会在uvmcopy()中继承。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MAXMMAP; i++) &#123;<br>  np-&gt;proc_VMA[i] = p-&gt;proc_VMA[i];<br>  <span class="hljs-keyword">if</span>(np-&gt;proc_VMA[i].f) filedup(np-&gt;proc_VMA[i].f);<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，即可通过mmaptest和usertests。</p>]]></content>
    
    
    
    <tags>
      
      <tag>mit6.s081</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2023/03/30/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2023/03/30/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><img src="/2023/03/30/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/3.jpg" class="" title="图片引用方法一"><p><img src="3.jpg" alt="图片引用方法二"></p><p><img src="/images/3.jpg" alt="图片引用方法三"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/03/30/hello-world/"/>
    <url>/2023/03/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
